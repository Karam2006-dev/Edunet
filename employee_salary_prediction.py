# -*- coding: utf-8 -*-
"""employee salary prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Fl-O4FRQ_WvDjoi8pt2sxhW6Kb7tXty
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('adult 3.csv')

# Display the first 5 rows
display(df.head())

# Display information summary
display(df.info())

# Load the dataset from a different path
df = pd.read_csv('adult 3.csv')

# Display the first 5 rows
display(df.head())

# Display information summary
display(df.info())

# Load the dataset from another common path
df = pd.read_csv('adult 3.csv')

# Display the first 5 rows
display(df.head())

# Display information summary
display(df.info())

display(df.isnull().sum())
display(df.dtypes)

import numpy as np
import pandas as pd

# Replace '?' with NaN
df.replace('?', np.nan, inplace=True)

# Check for missing values again after replacing '?'
display(df.isnull().sum())

# Drop rows with missing values as the number of missing values is relatively small
df.dropna(inplace=True)

# Select categorical columns to encode (object type)
categorical_cols = df.select_dtypes(include=['object']).columns

# Exclude the target variable 'income' from encoding
categorical_cols = categorical_cols.drop('income')

# Apply one-hot encoding
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Separate features (X) and target variable (y)
X = df_encoded.drop('income', axis=1)
y = df_encoded['income']

display(X.head())
display(y.head())

# 1. Identify that this is a binary classification problem
# The target variable 'income' has two classes: '<=50K' and '>50K'.
problem_type = "Binary Classification"

# 2. Consider common classification models suitable for tabular data
# Common models include Logistic Regression, Decision Trees, Random Forests, Gradient Boosting.

# 3. Select a model that is generally robust and performs well.
# Random Forest Classifier is a good choice for its robustness and ability to handle non-linear relationships.
# 4. Note the chosen model.
chosen_model = "Random Forest Classifier"

print(f"Problem Type: {problem_type}")
print(f"Chosen Model: {chosen_model}")

from sklearn.ensemble import RandomForestClassifier

# Instantiate a RandomForestClassifier object with default parameters
model = RandomForestClassifier(random_state=42)

# Fit the model to the training data
model.fit(X, y)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model on the training data (re-training since we split)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='>50K')
recall = recall_score(y_test, y_pred, pos_label='>50K')
f1 = f1_score(y_test, y_pred, pos_label='>50K')

# Print the calculated metrics
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")

# Use the trained model to make predictions on the test features
y_pred = model.predict(X_test)

# Display the first 10 predictions
display(y_pred[:10])